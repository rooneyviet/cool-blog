generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @Validator.IsNotEmpty()
  /// @Validator.@IsEmail()
  email     String   @unique
  /// @Validator.IsNotEmpty()
  /// @Validator.MinLength(4)
  username     String   @unique
  userStatus  String     @default("Active")
  /// @Validator.IsNotEmpty()
  /// @HideField()
  /// @Validator.MinLength(8)
  password  String
  posts     Post[]
  role      Role @default(ADMIN)
  likes        Like[]
  comments     Comment[]
}

model Post {
  id        String   @id @default(cuid())
  url          String       @unique
  createdAt DateTime @default(now())
  views        Int            @default(0)
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  categories CategoriesOnPosts[]
  likes        Like[]
  comments     Comment[]
  
}

model Category {
  id    String                 @id @default(cuid())
  name  String
  description String?
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     String // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, categoryId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post   Post  @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int   @id @default(autoincrement())
  text      String
  postId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post   Post  @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}


generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output = "../src/@generated/prisma-nestjs-graphql"
    reExport = Directories

    fields_Validator_from = "class-validator"
    fields_Validator_input = true
    decorate_1_type        = "CreateOne*Args"
    decorate_1_field       = data
    decorate_1_name        = ValidateNested
    decorate_1_from        = "class-validator"
    decorate_1_arguments   = "[]"
    decorate_2_type        = "CreateOne*Args"
    decorate_2_field       = data
    decorate_2_from        = "class-transformer"
    decorate_2_arguments   = "['() => {propertyType.0}']"
    decorate_2_name        = Type
}